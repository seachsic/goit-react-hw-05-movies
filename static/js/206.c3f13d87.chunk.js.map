{"version":3,"file":"static/js/206.c3f13d87.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.styled.js","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 500px);\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport { Container, CardWrapper, MovieName } from \"./MoviesList.styled\";\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const baseImageURL = \"https://image.tmdb.org/t/p/w500\";\n  return (\n    <Container>\n      {movies.map((movie) => (\n        <CardWrapper key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            <img src={movie.poster_path ? `${baseImageURL}${movie.poster_path}` : \"https://via.placeholder.com/500x750\"} alt=\"movie.title\" />\n            <MovieName>{movie.title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Notification = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-align: center;\n  padding-top: 50px;\n`","import styled from \"styled-components\";\n\n/*\n * Стили компонента Searchbar\n */\nexport const SearchbarHeader = styled.header `\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: rgb(66 68 82);\n`\n\n/*\n * Стили компонента SearchForm\n */\n\nexport const SearchForm = styled.form `\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`\n\nexport const SearchFormButton = styled.button `\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://www.svgrepo.com/show/508172/search-alt.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`\nexport const SearchFormButtonLabel = styled.label `\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`\n\nexport const SearchFormInput = styled.input `\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`\n","import { SearchbarHeader, SearchForm, SearchFormButton, SearchFormButtonLabel, SearchFormInput } from \"./SearchBox.styled\";\nimport { useState } from 'react';\n\nexport const SearchBox = ({ onSubmit }) => {\n\n  const [inputName, setInputName] = useState('');\n\n  const hangleNameOnChange = event => {\n    setInputName(event.currentTarget.value.toLowerCase());\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (inputName.trim() === '') {\n      alert('Type something in search input');\n      return\n    }\n    onSubmit(inputName);\n    setInputName('');\n  }\n  \n  return (\n    <SearchbarHeader>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n        <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n        </SearchFormButton>\n\n          <SearchFormInput\n            type=\"text\"\n            name=\"input\"\n            value={inputName}\n            onChange={hangleNameOnChange}\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n      </SearchForm>\n    </SearchbarHeader>    \n  );\n};\n","import { Notification } from './Movies.styled';\nimport { useState, useEffect } from 'react';\nimport { fetchSearchMovies } from 'services/Api';\nimport { SearchBox } from '../../components/SearchBox/SearchBox';\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\nimport { useSearchParams } from \"react-router-dom\";\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const name = searchParams.get('query');\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState('idle');\n\n     useEffect(() => {\n        if (!name) {\n            return;\n        }\n        \n        setStatus('pending');\n         \n        fetchSearchMovies(name)\n            .then(response => {\n                if (response.results.length === 0) {\n                    setStatus('rejected');\n                    return\n                }\n                setMovies(response.results);\n                setStatus('resolved');\n            })\n            .catch(error => {\n                setError(error);\n                setStatus('rejected');\n            })\n     }, [name]);\n    \n    const haldleFormSubmit = query => {\n        const nextParams = query !== '' ? { query } : {};\n        setSearchParams(nextParams);\n    }\n    \n    return (\n        <div>\n            <SearchBox onSubmit={haldleFormSubmit} />\n            {status === 'idle' && <Notification>Please, type something to the search</Notification>}\n            {status === 'pending' && <div>Loading....</div>}\n            {status === 'rejected' && <Notification>Oopps...no movies with this name.{!error && <div>{error}</div>}</Notification>}\n            {status === 'resolved' && <MoviesList movies={movies} />}\n        </div >\n    )\n}\n\nexport default Movies; \n","/* /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n/search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n/movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n/movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n/movies/get-movie-reviews запит оглядів для сторінки кінофільму. */\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nconst fetchTrendingMovies = (page = 1) => {\n     return fetch(`${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`)\n         .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Sorry, something went wrong. Please, try againe later`))\n            })\n}\n\n\nconst fetchSearchMovies = (inputName, page = 1) => {\n     return fetch(`${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${inputName}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n            })\n}\n\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${BASE_URL}movie/${review_id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n// const fetchMovieCast = (person_id) => {\n//      return fetch(`${BASE_URL}person/${person_id}?api_key=${GLOBAL_KEY}&language=en-US`)\n//             .then(response => {\n//                 if (response.ok) {\n//                     return response.json();\n//                 }\n\n//                 return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n//             })\n// }\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${BASE_URL}movie/${person_id}/credits?api_key=${GLOBAL_KEY}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\n\n\n\nexport { fetchTrendingMovies, fetchSearchMovies, fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n"],"names":["Container","styled","CardWrapper","MovieName","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","Notification","SearchbarHeader","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","SearchBox","onSubmit","useState","inputName","setInputName","event","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","useSearchParams","searchParams","setSearchParams","get","setMovies","error","setError","status","setStatus","useEffect","fetchSearchMovies","then","response","results","length","catch","query","BASE_URL","GLOBAL_KEY","fetchTrendingMovies","page","fetch","ok","json","Promise","reject","Error","props","fetchMoviesInfo","fetchMovieReviews","review_id","fetchMovieCast","person_id"],"sourceRoot":""}