{"version":3,"file":"static/js/776.43216262.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAU,mCAEVC,EAAQ,mCAAG,oGACGF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD3C,cACdE,EADc,yBAEbA,EAASC,MAFI,2CAAH,qDAKRC,EAAQ,mCAAG,WAAMC,GAAN,uFACGN,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEK,EAAlE,gCADH,cACdH,EADc,yBAEbA,EAASC,MAFI,2CAAH,sDAKRG,EAAU,mCAAG,WAAMC,GAAN,uFACCR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAsCP,EAAtC,oBADD,cAChBE,EADgB,yBAEfA,EAASC,MAFM,2CAAH,sDAKVK,EAAI,mCAAG,WAAMD,GAAN,uFACOR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CP,EAA9C,oBADP,cACVE,EADU,yBAETA,EAASC,KAAKM,MAFL,2CAAH,sDAKJC,EAAU,mCAAG,WAAMH,GAAN,uFACCR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CP,EAA9C,2BADD,cAChBE,EADgB,yBAEfA,EAASC,MAFM,2CAAH,qD,iHCvBVQ,EAAUC,EAAAA,GAAAA,IAAH,6JAQPC,EAAQD,EAAAA,GAAAA,MAAH,2HAOLE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,IAAPH,CAAH,uG,SCfJI,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE/B,OACI,UAACP,EAAD,YACA,SAACG,EAAD,KACA,SAACD,EAAD,CACIM,KAAK,OACLF,MAAOA,EACPC,SAAU,SAACE,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,MAAzB,MAIrB,E,2BCXYK,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACfC,GAAWC,EAAAA,EAAAA,MAEjB,OAAKF,GAKD,wBACCA,EAAOG,KAAI,SAAAC,GACR,OACA,yBACI,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,SACCG,EAAMK,SAFFL,EAAME,GAMlB,OAbM,SAACI,EAAA,EAAD,GAgBd,E,2BCGD,EAtBmB,WAAO,IAAD,EACrB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM/B,EAAK,UAAG8B,EAAaE,IAAI,gBAApB,QAAgC,GAC3C,ECLoB,SAAAhC,GACpB,OAA4BiC,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACQ,KAAVnC,IAIJD,EAAAA,EAAAA,IAASC,GAAOoC,MAAK,SAAAvC,GACjBqC,GAAU,OAAIrC,EAASwC,SAC1B,GACJ,GAAE,CAACrC,IAEG,CAAEkB,OAAAA,EACZ,CDTsBoB,CAAStC,GAOtBuC,EAPN,EAAQrB,OAOkBsB,QAAO,SAAAlB,GAAK,OAClCA,EAAMK,MAAMc,cAAcC,SAAS1C,EAAMyC,cADP,IAItC,OACI,4BACI,SAAC9B,EAAD,CAAWC,MAAOZ,EAAOa,SAXb,SAAAb,GAEhB+B,EAD6B,KAAV/B,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAElD,KASO,SAACiB,EAAD,CAAQC,OAAQqB,MAG3B,C","sources":["API/API.jsx","components/Searchbox/searchbox.styled.js","components/Searchbox/Searchbox.jsx","components/Movies/Movies.jsx","pages/MoviesPage/MoviesPage.jsx","hooks/useQuery.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const API_KEY = 'cc6ba0cdbd17008bd83d850b6f4ce8a8';\n\nexport const Trending = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const getQuery = async query => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false&page=1`);\n    return response.data;\n};\n\nexport const getMovieID = async movieId => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const Cast = async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n};\n","import styled from \"styled-components\";\nimport { HiSearch } from \"react-icons/hi\";\n\nexport const Wrapper = styled.div`\n    display: inline-flex;\n    align-items: center;\n    justify-content:center;\n    position: relative;\n    margin-bottom: 16px;\n`;\n\nexport const Input = styled.input`\n    padding: 8px 32px 8px 8px;\n    border-radius: 4px;\n    font: inherit;\n    max-width:600px;\n`;\n\nexport const Icon = styled(HiSearch)`\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    right: 6px;\n`;","import { Wrapper, Icon, Input } from \"./searchbox.styled\";\nimport PropTypes from 'prop-types';\n\nexport const Searchbox = ({ value, onChange }) => {\n\n    return (\n        <Wrapper>\n        <Icon />\n        <Input\n            type=\"text\"\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n        />\n        </Wrapper>\n    );\n};\n\nSearchbox.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange:PropTypes.func.isRequired\n};","import { Link, useLocation } from 'react-router-dom';\nimport { Loader } from '../Loader/Loader';\n\n\nexport const Movies = ({ movies }) => {\n    const location = useLocation();\n\n    if (!movies) {\n        return <Loader />;\n    };\n\n    return (\n        <ul>\n        {movies.map(movie => {\n            return (\n            <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n                </Link>\n            </li>\n            );\n        })}\n        </ul>\n    );\n};","import { Searchbox } from 'components/Searchbox/Searchbox';\nimport { Movies } from 'components/Movies/Movies';\nimport { useQuery } from 'hooks/useQuery';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? '';\n    const { movies } = useQuery(query);\n\n    const updateQuery = query => {\n        const nextParams = query !== '' ? { query } : {};\n        setSearchParams(nextParams);\n    };\n\n    const moviesList = movies.filter(movie =>\n        movie.title.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return (\n        <div>\n            <Searchbox value={query} onChange={updateQuery} />\n            <Movies movies={moviesList} />\n        </div>\n    );\n};\n\nexport default MoviesPage;","import { getQuery } from \"API/API\";\nimport { useEffect, useState } from \"react\";\n\nexport const useQuery = query => {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        if (query === '') {\n            return;\n        };\n\n        getQuery(query).then(response => {\n            setMovies([...response.results]);\n        });\n    }, [query]);\n\n    return { movies };\n};"],"names":["axios","API_KEY","Trending","response","data","getQuery","query","getMovieID","movieId","Cast","cast","getReviews","Wrapper","styled","Input","Icon","HiSearch","Searchbox","value","onChange","type","e","target","Movies","movies","location","useLocation","map","movie","to","id","state","from","title","Loader","useSearchParams","searchParams","setSearchParams","get","useState","setMovies","useEffect","then","results","useQuery","moviesList","filter","toLowerCase","includes"],"sourceRoot":""}