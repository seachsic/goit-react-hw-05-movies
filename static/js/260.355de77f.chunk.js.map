{"version":3,"file":"static/js/260.355de77f.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.js","pages/MovieDetails/MovieDetails.jsx","services/Api.js"],"sourcesContent":["import { HiArrowLeft } from \"react-icons/hi\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n","// import { } from './MovieDetails.styled';\nimport { useParams, useLocation, Link, Outlet } from \"react-router-dom\";\nimport { BackLink } from \"../../components/BackLink/BackLink\";\nimport { fetchMoviesInfo } from 'services/Api';\nimport { useState, useEffect, Suspense } from 'react';\n\nconst MovieDetails = () => {\n    const { id } = useParams();\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/movies\";\n    const baseImageURL = \"https://image.tmdb.org/t/p/w500\";\n\n    const [movie, setMovie] = useState([]);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        fetchMoviesInfo(id)\n        .then(response => {\n            setMovie(response);\n        })\n        .catch(error => {\n            setError(error);\n            console.log(error);\n        })\n    }, [id]);\n    \n       return (\n            <div>\n                <BackLink to={backLinkHref}>Back to products</BackLink>\n\n           <div>\n             {!movie && <div>{ error }</div>}\n                    <img src={movie.poster_path ? `${baseImageURL}${movie.poster_path}` : \"https://via.placeholder.com/500x750\"} alt={movie.title} />\n                        <div>\n                            <h2>\n                            {movie.title}  ({id})\n                            </h2>\n                            <p>User Score: {movie.vote_average}</p>\n                            <h3>Overview</h3>\n                            <p> \n                            {movie.overview}\n                       </p>\n                            <h3>Geners</h3>\n                            <ul> \n                                {movie.genres && movie.genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n                            </ul>\n                        </div>\n               </div>\n               \n                <ul>\n        <li>\n          <Link to=\"cast\" state={{ ...location.state }}>Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ ...location.state }}>Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n            </div>\n    );\n}\n\n\nexport default MovieDetails; ","/* /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n/search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n/movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n/movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n/movies/get-movie-reviews запит оглядів для сторінки кінофільму. */\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nconst fetchTrendingMovies = (page = 1) => {\n     return fetch(`${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`)\n         .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Sorry, something went wrong. Please, try againe later`))\n            })\n}\n\n\nconst fetchSearchMovies = (inputName, page = 1) => {\n     return fetch(`${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${inputName}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n            })\n}\n\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${BASE_URL}movie/${review_id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n// const fetchMovieCast = (person_id) => {\n//      return fetch(`${BASE_URL}person/${person_id}?api_key=${GLOBAL_KEY}&language=en-US`)\n//             .then(response => {\n//                 if (response.ok) {\n//                     return response.json();\n//                 }\n\n//                 return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n//             })\n// }\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${BASE_URL}movie/${person_id}/credits?api_key=${GLOBAL_KEY}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\n\n\n\nexport { fetchTrendingMovies, fetchSearchMovies, fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","id","useParams","location","useLocation","backLinkHref","state","from","useState","movie","setMovie","error","setError","useEffect","fetchMoviesInfo","then","response","catch","console","log","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","Suspense","fallback","BASE_URL","GLOBAL_KEY","fetchTrendingMovies","page","fetch","ok","json","Promise","reject","Error","fetchSearchMovies","inputName","props","fetchMovieReviews","review_id","fetchMovieCast","person_id"],"sourceRoot":""}