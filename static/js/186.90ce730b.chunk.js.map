{"version":3,"file":"static/js/186.90ce730b.chunk.js","mappings":"8LAyCA,UAnCgB,WACZ,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACV,GAA6BE,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAgBC,EAAhB,KACE,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAaI,OAXJC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAkBR,GACbS,MAAK,SAAAC,GACFN,EAAUM,EAASC,QACtB,IACAC,OAAM,SAAAP,GACHC,EAASD,GACTQ,QAAQC,IAAIT,EACf,GACR,GAAE,CAACL,KAGI,4BACMG,EAAQY,SAAU,8CAAsBV,MAC1C,wBACKF,GAAWA,EAAQa,KAAI,SAAAC,GAAM,OAC1B,2BACI,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFNF,EAAOjB,GADU,QAYjD,C,oKChCKoB,EAAW,gCACXC,EAAa,mCAEbC,EAAsB,WAAe,IAAdC,EAAa,uDAAN,EAC/B,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,sCAA0CC,EAA1C,iBAA6DE,IACpEd,MAAK,SAAAC,GACC,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,yDACzB,GACZ,EAGKC,EAAoB,SAACC,GAAyB,IAAdR,EAAa,uDAAN,EACxC,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,gCAAoCC,EAApC,gCAAsEE,EAAtE,sCAAwGQ,IAC5GtB,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,6CAAgD,EAAKG,MAAMD,YACpF,GACZ,EAEKE,EAAkB,SAACjC,GACpB,OAAOwB,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBpB,EAArB,oBAAmCqB,EAAnC,oBACJZ,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,0BACzB,GACZ,EAEKrB,EAAoB,SAAC0B,GACvB,OAAOV,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBc,EAArB,4BAAkDb,EAAlD,oBACPZ,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,sBACzB,GACR,EAcKM,EAAiB,SAACC,GACnB,OAAOZ,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBgB,EAArB,4BAAkDf,IACtDZ,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,mBACzB,GACZ,C","sources":["components/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["// import { } from './Reviews.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nimport { fetchMovieReviews } from 'services/Api';\n\nconst Reviews = () => {\n    const { id } = useParams();\n  const [reviews, setReview] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetchMovieReviews(id)\n            .then(response => {\n                setReview(response.results);\n            })\n            .catch(error => {\n                setError(error);\n                console.log(error);\n            })\n    }, [id]);\n    \n        return (\n            <div>\n                {!reviews.length && <div>No reviews yet  {error}</div>}\n                <ul>\n                    {reviews && reviews.map(review => \n                        <li key={review.id}>\n                            <h2>{review.author}</h2>\n                            <p>{review.content}</p>\n                        </li>\n                    ) }\n                </ul>\n            \n        </div>\n    );\n\n\n}\n\n\nexport default Reviews; ","/* /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n/search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n/movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n/movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n/movies/get-movie-reviews запит оглядів для сторінки кінофільму. */\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nconst fetchTrendingMovies = (page = 1) => {\n     return fetch(`${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`)\n         .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Sorry, something went wrong. Please, try againe later`))\n            })\n}\n\n\nconst fetchSearchMovies = (inputName, page = 1) => {\n     return fetch(`${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${inputName}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n            })\n}\n\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${BASE_URL}movie/${review_id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n// const fetchMovieCast = (person_id) => {\n//      return fetch(`${BASE_URL}person/${person_id}?api_key=${GLOBAL_KEY}&language=en-US`)\n//             .then(response => {\n//                 if (response.ok) {\n//                     return response.json();\n//                 }\n\n//                 return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n//             })\n// }\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${BASE_URL}movie/${person_id}/credits?api_key=${GLOBAL_KEY}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\n\n\n\nexport { fetchTrendingMovies, fetchSearchMovies, fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n"],"names":["id","useParams","useState","reviews","setReview","error","setError","useEffect","fetchMovieReviews","then","response","results","catch","console","log","length","map","review","author","content","BASE_URL","GLOBAL_KEY","fetchTrendingMovies","page","fetch","ok","json","Promise","reject","Error","fetchSearchMovies","inputName","props","fetchMoviesInfo","review_id","fetchMovieCast","person_id"],"sourceRoot":""}