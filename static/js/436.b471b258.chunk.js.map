{"version":3,"file":"static/js/436.b471b258.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAU,mCAEVC,EAAQ,mCAAG,oGACGF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD3C,cACdE,EADc,yBAEbA,EAASC,MAFI,2CAAH,qDAKRC,EAAQ,mCAAG,WAAMC,GAAN,uFACGN,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEK,EAAlE,gCADH,cACdH,EADc,yBAEbA,EAASC,MAFI,2CAAH,sDAKRG,EAAU,mCAAG,WAAMC,GAAN,uFACCR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAsCP,EAAtC,oBADD,cAChBE,EADgB,yBAEfA,EAASC,MAFM,2CAAH,sDAKVK,EAAI,mCAAG,WAAMD,GAAN,uFACOR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CP,EAA9C,oBADP,cACVE,EADU,yBAETA,EAASC,KAAKM,MAFL,2CAAH,sDAKJC,EAAU,mCAAG,WAAMH,GAAN,uFACCR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CP,EAA9C,2BADD,cAChBE,EADgB,yBAEfA,EAASC,MAFM,2CAAH,qD,sICOvB,EA5BgB,WACZ,IACA,ECJsB,SAAAI,GACtB,OAA8BI,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACFP,IACAG,EAAAA,EAAAA,IAAWH,GAASQ,MAAK,SAAAb,GACrBW,GAAW,OAAIX,EAASc,SAC3B,GACR,GAAE,CAACT,IAEG,CAAEK,QAAAA,EACZ,CDPuBK,EADAC,EAAAA,EAAAA,MAAZX,SACAK,EAAR,EAAQA,QAER,OAAKA,EAEkB,IAAnBA,EAAQO,QACD,qEAIP,wBACCP,EAAQQ,KAAI,SAAAC,GACT,OACA,2BACI,uBAAIA,EAAOC,UACX,uBAAID,EAAOE,YAFNF,EAAOC,OAKnB,OAfgB,SAACE,EAAA,EAAD,GAkBxB,C","sources":["API/API.jsx","components/Reviews/Reviews.jsx","hooks/useReviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const API_KEY = 'cc6ba0cdbd17008bd83d850b6f4ce8a8';\n\nexport const Trending = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const getQuery = async query => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false&page=1`);\n    return response.data;\n};\n\nexport const getMovieID = async movieId => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const Cast = async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useReviews } from 'hooks/useReviews';\nimport { Loader } from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const { reviews } = useReviews(movieId);\n\n    if (!reviews) return <Loader />;\n\n    if (reviews.length === 0) {\n        return <p>We don't have any reviews for this movie</p>;\n    };\n\n    return (\n        <ul>\n        {reviews.map(review => {\n            return (\n            <li key={review.author}>\n                <p>{review.author}</p>\n                <p>{review.content}</p>\n            </li>\n            );\n        })}\n        </ul>\n    );\n};\n\nReviews.propTypes = {\nmovieId: PropTypes.string.isRequired,\n};\n\nexport default Reviews;","import { getReviews } from \"API/API\";\nimport { useEffect, useState } from \"react\";\n\nexport const useReviews = movieId => {\n    const [reviews, setReviews] = useState(null);\n\n    useEffect(() => {\n        if (movieId) \n            getReviews(movieId).then(response => {\n                setReviews([...response.results]);\n            });\n    }, [movieId]);\n\n    return { reviews };\n};"],"names":["axios","API_KEY","Trending","response","data","getQuery","query","getMovieID","movieId","Cast","cast","getReviews","useState","reviews","setReviews","useEffect","then","results","useReviews","useParams","length","map","review","author","content","Loader"],"sourceRoot":""}