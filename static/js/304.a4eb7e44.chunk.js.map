{"version":3,"file":"static/js/304.a4eb7e44.chunk.js","mappings":"mNAEaA,EAAYC,EAAAA,GAAAA,IAAH,6HAOTC,EAAcD,EAAAA,GAAAA,IAAH,uHASXE,EAAYF,EAAAA,GAAAA,GAAH,mG,SCfTG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,SAACC,GAAD,OACV,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,WACE,gBAAKQ,IAAKL,EAAMM,YAAN,UANC,mCAMD,OAAsCN,EAAMM,aAAgB,sCAAuCC,IAAI,iBACjH,SAACb,EAAD,UAAYM,EAAMQ,YAHJR,EAAME,GADd,KAUjB,C,2FChBYO,E,OAAejB,GAAAA,IAAH,iH,oCCuCzB,EAnCa,WACT,OAA4BkB,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KAEA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA4BH,EAAAA,EAAAA,UAAS,QAArC,eAAOI,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,MACKC,MAAK,SAAAC,GAC8B,IAA5BA,EAASC,QAAQC,QAIrBN,EAAU,YACVJ,EAAUQ,EAASC,UAJfL,EAAU,WAKjB,IACAO,OAAM,SAAAV,GACHC,EAASD,GACTG,EAAU,WACb,GACR,GAAC,KAGE,4BACI,2CACY,SAAXD,IAAqB,SAACL,EAAD,yBACV,YAAXK,IAAwB,yCACb,aAAXA,IAAyB,UAACL,EAAD,2CAA4CG,IAAS,yBAAMA,OACzE,aAAXE,IAAyB,SAACnB,EAAA,EAAD,CAAYC,OAAQA,MAIzD,C,oKChCK2B,EAAW,gCACXC,EAAa,mCAEbP,EAAsB,WAAe,IAAdQ,EAAa,uDAAN,EAC/B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAA0CC,EAA1C,iBAA6DC,IACpEP,MAAK,SAAAC,GACC,OAAIA,EAASQ,GACFR,EAASS,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,yDACzB,GACZ,EAGKC,EAAoB,SAACC,GAAyB,IAAdR,EAAa,uDAAN,EACxC,OAAOC,MAAM,GAAD,OAAIH,EAAJ,gCAAoCC,EAApC,gCAAsEC,EAAtE,sCAAwGQ,IAC5Gf,MAAK,SAAAC,GACF,OAAIA,EAASQ,GACFR,EAASS,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,6CAAgD,EAAKG,MAAMD,YACpF,GACZ,EAEKE,EAAkB,SAACjC,GACpB,OAAOwB,MAAM,GAAD,OAAIH,EAAJ,iBAAqBrB,EAArB,oBAAmCsB,EAAnC,oBACJN,MAAK,SAAAC,GACF,OAAIA,EAASQ,GACFR,EAASS,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,0BACzB,GACZ,EAEKK,EAAoB,SAACC,GACvB,OAAOX,MAAM,GAAD,OAAIH,EAAJ,iBAAqBc,EAArB,4BAAkDb,EAAlD,oBACPN,MAAK,SAAAC,GACF,OAAIA,EAASQ,GACFR,EAASS,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,sBACzB,GACR,EAcKO,EAAiB,SAACC,GACnB,OAAOb,MAAM,GAAD,OAAIH,EAAJ,iBAAqBgB,EAArB,4BAAkDf,IACtDN,MAAK,SAAAC,GACF,OAAIA,EAASQ,GACFR,EAASS,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,mBACzB,GACZ,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 500px);\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport { Container, CardWrapper, MovieName } from \"./MoviesList.styled\";\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const baseImageURL = \"https://image.tmdb.org/t/p/w500\";\n  return (\n    <Container>\n      {movies.map((movie) => (\n        <CardWrapper key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            <img src={movie.poster_path ? `${baseImageURL}${movie.poster_path}` : \"https://via.placeholder.com/500x750\"} alt=\"movie.title\" />\n            <MovieName>{movie.title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Notification = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-align: center;\n  padding-top: 50px;\n`","import { Notification } from './Home.styled';\nimport { fetchTrendingMovies } from 'services/Api';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\n\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState('idle');\n\n    useEffect(() => {\n        fetchTrendingMovies()\n            .then(response => {\n                if (response.results.length === 0) {\n                    setStatus('rejected');\n                    return\n                }\n                setStatus('resolved');\n                setMovies(response.results);\n            })\n            .catch(error => {\n                setError(error);\n                setStatus('rejected');\n            })\n    },[]);\n    \n    return (\n        <div>\n            <h1>Trending today</h1>\n            {status === 'idle' && <Notification>Start page</Notification>}\n            {status === 'pending' && <div>Loading....</div>}\n            {status === 'rejected' && <Notification>Oopps...no movies was found.{!error && <div>{error}</div>}</Notification>}\n            {status === 'resolved' && <MoviesList movies={movies} />}\n        </div>\n    );\n\n}\n\n\nexport default Home; ","/* /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n/search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n/movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n/movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n/movies/get-movie-reviews запит оглядів для сторінки кінофільму. */\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nconst fetchTrendingMovies = (page = 1) => {\n     return fetch(`${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`)\n         .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Sorry, something went wrong. Please, try againe later`))\n            })\n}\n\n\nconst fetchSearchMovies = (inputName, page = 1) => {\n     return fetch(`${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${inputName}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n            })\n}\n\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${BASE_URL}movie/${review_id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n// const fetchMovieCast = (person_id) => {\n//      return fetch(`${BASE_URL}person/${person_id}?api_key=${GLOBAL_KEY}&language=en-US`)\n//             .then(response => {\n//                 if (response.ok) {\n//                     return response.json();\n//                 }\n\n//                 return Promise.reject(new Error(`Oopps...no movies with this name - ${this.props.inputName}`))\n//             })\n// }\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${BASE_URL}movie/${person_id}/credits?api_key=${GLOBAL_KEY}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\n\n\n\nexport { fetchTrendingMovies, fetchSearchMovies, fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n"],"names":["Container","styled","CardWrapper","MovieName","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","Notification","useState","setMovies","error","setError","status","setStatus","useEffect","fetchTrendingMovies","then","response","results","length","catch","BASE_URL","GLOBAL_KEY","page","fetch","ok","json","Promise","reject","Error","fetchSearchMovies","inputName","props","fetchMoviesInfo","fetchMovieReviews","review_id","fetchMovieCast","person_id"],"sourceRoot":""}